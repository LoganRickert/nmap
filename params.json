{"name":"Nmap","tagline":"python nmap tool to scan hosts and searchfor CVE details based on the nmap report.","body":"scan.py is a python module designed around the python-nmap library.\r\nThe purpose of this module is to easily scan a network, and\r\nget an immediate report of all vulnerable services running\r\non a host, or hosts.\r\n\r\nThe module has two stages:\r\n\r\n\r\n###1. Discovery:\r\n\r\n    Using python nmap to detect firewalls, discover hosts\r\n    and store semi-stateful information about services\r\n    running on a host or hosts.\r\n\r\n###2. CVE Query:\r\n\r\n    This module will query an exploit database(tbd) and search\r\n    for a vulnerability. If one is found, the source code is\r\n    saved on the local machine in ./exploits/[port number]/[exploit]\r\n    and a report is sent to the user.\r\n\r\n    If the user specifies, this module will NOT create an outgoing\r\n    connection to the exploit database, and will instead use exploits\r\n    specified on the local machine. If none are found elsewhere,\r\n    this module will search the local database for exploits\r\n    matching the service in ./exploits/[port number]/\r\n\r\n    If none are found, a warning will be issued to the user\r\n\r\n###(3?). Beacon!:\r\n    \r\n    In this phase, the device will scan the network every X hours, minute, or seconds designated by the user\r\n    and log the differences in:\r\n      * number of devices\r\n      * services of the device\r\n      * changes to ARP table\r\n\r\n###(4?). Exploitation(Future):\r\n\r\n    For now, the module will spawn a shell in the directory of the exploit\r\n    and attempt to (compile and/or) launch the exploit\r\n\r\n    In the future, I hope to convert a majority of the service exploits to\r\n    python, to be able to be launched natively and immediately in a new\r\n    python meterpreter-esque shell.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}